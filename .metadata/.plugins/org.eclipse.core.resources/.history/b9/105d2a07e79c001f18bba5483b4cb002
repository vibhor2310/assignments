package com.springboot.insurance_app.controller;

import java.time.LocalDate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.insurance_app.dto.ResponseMessageDto;
import com.springboot.insurance_app.enums.ClaimStatus;
import com.springboot.insurance_app.exception.ResourceNotFoundException;
import com.springboot.insurance_app.model.Claim;
import com.springboot.insurance_app.model.Executive;
import com.springboot.insurance_app.model.Policy;
import com.springboot.insurance_app.model.PolicyHolder;
import com.springboot.insurance_app.service.ClaimService;
import com.springboot.insurance_app.service.ExecutiveService;
import com.springboot.insurance_app.service.PolicyHolderService;
import com.springboot.insurance_app.service.PolicyService;

@RestController
public class ClaimController {
	
	@Autowired
	private PolicyService policyService;
	
	@Autowired
	private PolicyHolderService policyHolderService;
	
	@Autowired
	private ExecutiveService executiveService;
	
	@Autowiredo
	private ClaimService claimService;
	
	@PostMapping("/claim/process/{policyId}/{policyHolderId}/{executiveId}")
	public ResponseEntity processClaim(@PathVariable int policyId,@PathVariable int policyHolderId,@PathVariable int executiveId,@RequestBody Claim claim,ResponseMessageDto dto) {
		// validate policyHolderId;
		PolicyHolder policyHolder = null;
		
		try {
			policyHolder = policyHolderService.validate(policyHolderId);
		} catch (ResourceNotFoundException e) {
			dto.setMsg(e.getMessage());
			 return ResponseEntity.badRequest().body(dto);
		}
		
		// validate policyId
		
		Policy policy = null;
		
		try {
			policy = policyService.validate(policyId);
		} catch (ResourceNotFoundException e) {
			dto.setMsg(e.getMessage());
			 return ResponseEntity.badRequest().body(dto);
		}
		
		// validate executive id;
		
		Executive executive = null;
		
		try {
			executive = executiveService.validate(executiveId);
		} catch (ResourceNotFoundException e) {
			dto.setMsg(e.getMessage());
			 return ResponseEntity.badRequest().body(dto);
		}
		
		// attach policy , policyHolder , executive;
		
		claim.setPolicy(policy);
		claim.setPolicyHolder(policyHolder);
		claim.setExecutive(executive);
		claim.setClaimDate(LocalDate.now());
		claim.setClaimStatus(ClaimStatus.IN_PROCESS);
		
		
		claim = claimService.insert(claim);
		return ResponseEntity.ok(claim); 
		
		
		
		
		
		
		
		
		
		
	}

}
